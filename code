import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os

def ensure_directories():
    """Cr√©er les r√©pertoires n√©cessaires"""
    os.makedirs('historiques', exist_ok=True)
    os.makedirs('data', exist_ok=True)

def detect_consecutive_declines(data, weeks=2):
    """D√©tecter les s√©quences de d√©gradation M2"""
    data = data.copy()
    data['Decline_Flag'] = data['% M2 Variation'] < -5  # Seuil d√©gradation
    
    sequences = []
    current_sequence = []
    
    for idx, row in data.iterrows():
        if row['Decline_Flag']:
            current_sequence.append({
                'date': row['DateTime'],
                'variation': row['% M2 Variation']
            })
        else:
            if len(current_sequence) >= weeks:
                sequences.append(current_sequence.copy())
            current_sequence = []
    
    # V√©rifier la derni√®re s√©quence
    if len(current_sequence) >= weeks:
        sequences.append(current_sequence.copy())
    
    return sequences

def analyze_m2_alerts(data):
    """Analyse M2 avec focus sur les 6 derni√®res alertes"""
    
    # Calculer les variations M2 si pas d√©j√† fait
    if '% M2 Variation' not in data.columns:

    
    # Filtrer alertes significatives (>10%)
    significant_alerts = data[
        (pd.notna(data['% M2 Variation'])) & 
        (abs(data['% M2 Variation']) >= 10)
    ].copy()
    
    if len(significant_alerts) == 0:
        return "‚úÖ Aucune alerte M2 >10% d√©tect√©e", []
    
    # PRENDRE SEULEMENT LES 6 DERNI√àRES (plus r√©centes)
    recent_alerts = significant_alerts.tail(6)
    
    print(f"üìä {len(recent_alerts)} alertes r√©centes analys√©es (sur {len(significant_alerts)} total)")
    
    # Analyser les patterns
    major_drops = (recent_alerts['% M2 Variation'] < -15).sum()
    consecutive_drops = 0
    
    # Compter s√©quences cons√©cutives
    for i in range(1, len(recent_alerts)):
        current = recent_alerts.iloc[i]
        previous = recent_alerts.iloc[i-1]
        if current['% M2 Variation'] < -5 and previous['% M2 Variation'] < -5:
            consecutive_drops += 1
    
    # Niveau M2 actuel (derni√®re valeur)

    
    # ALERTE SIMPLE bas√©e sur donn√©es r√©centes
    if major_drops >= 1 and current_m2 < 4:
"
    else:
        alert = "‚úÖ M2 NORMAL"
    
    return alert, recent_alerts

def create_alert_summary(alert, recent_alerts, current_m2, last_variation):
    """Cr√©e fiche alerte focus sur donn√©es r√©centes"""
    
    report = []
    report.append("=" * 70)
    report.append("üìã FICHE ALERTE M2 - 6 DERNI√àRES ALERTES")
    report.append("=" * 70)
    report.append("")
    
    # En-t√™te avec focus r√©cent
    report.append(f"üéØ STATUT ACTUEL: {alert}")
    report.append(f"üìä M2 niveau actuel: {current_m2:.2f}%")
    report.append(f"üìâ Derni√®re variation: {last_variation:+.2f}%")
    report.append(f"üìÖ Analyse: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    report.append("")
    
    if len(recent_alerts) == 0:
        report.append("‚úÖ Aucune alerte r√©cente >10%")
        report.append("")
        report.append("=" * 70)
        return "\n".join(report)
    
    
    for _, row in recent_alerts.iterrows():
        variation_date = row['DateTime']
        variation_pct = row['% M2 Variation']
        
        # Calculer date d'alerte 
        try:
            var_date_obj = datetime.strptime(variation_date, '%Y-%m-%d')
            alert_date_obj = var_date_obj - timedelta(days=12)
            alert_date = alert_date_obj.strftime('%d/%m/%Y')
            
            if variation_pct < 0:
                icon = "üö®"
                action = "VENTE/SHORT"
            else:
                icon = "üöÄ"
                action = "ACHAT/LONG"
            
            report.append(f"   {icon} {variation_date}: {variation_pct:+.2f}% ({action})")
            report.append(f"      ‚è∞ Alerte d√®s: {alert_date}")
            report.append(f"      üí° Action: {action} recommand√© d√®s {alert_date}")
            report.append("")
            
        except ValueError:
            report.append(f"   üìÖ {variation_date}: {variation_pct:+.2f}%")
            report.append(f"      ‚ö†Ô∏è Date invalide pour calcul d'alerte")
            report.append("")
    
    # Statistiques r√©centes
    avg_variation = recent_alerts['% M2 Variation'].mean()
    max_variation = recent_alerts['% M2 Variation'].max()
    min_variation = recent_alerts['% M2 Variation'].min()
    
    report.append("üìä STATISTIQUES 6 DERNI√àRES:")
    report.append(f"   üìà Variation moyenne: {avg_variation:+.1f}%")
    report.append(f"   üìà Plus forte hausse: {max_variation:+.1f}%")
    report.append(f"   üìâ Plus forte baisse: {min_variation:+.1f}%")
    report.append("")
    
    # Instructions
    report.append("üí° UTILISATION:")
    report.append("   ‚Ä¢ Focus sur les 6 alertes les plus r√©centes")
    
    report.append("=" * 70)
    
    return "\n".join(report)

def main():
    """Fonction principale avec focus r√©cent"""
    
    print("üöÄ Syst√®me d'Alerte M2 - Focus 6 Derni√®res")
    print("üìä Analyse des alertes r√©centes seulement")
    print("=" * 70)
    
    try:
        # Cr√©er r√©pertoires
        ensure_directories()
        
        # Charger donn√©es
        print("üìä Chargement donn√©es M2...")
        
        # Analyser avec focus r√©cent
        print("\nüîç Analyse alertes r√©centes...")
 
        
        # Donn√©es actuelles

        
        # Cr√©er rapport focus r√©cent
        print("\nüìã G√âN√âRATION RAPPORT R√âCENT:")
        report = create_alert_summary(alert, recent_alerts, current_m2, last_variation)
        print(report)
        
        # Sauvegarder
        date_str = datetime.now().strftime('%Y-%m-%d')
        filename = f"historiques/{date_str}-rapport-m2.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"Rapport g√©n√©r√© le: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}\n")
           
       
        
        print(f"\nüíæ Rapport sauvegard√©: {filename}")
        print(f"üìÅ R√©pertoire: {os.getcwd()}")
        print(f"üéØ Focus: 6 derni√®res alertes seulement")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {str(e)}")
        print("üîß V√©rifiez le fichier CSV et r√©essayez")

if __name__ == "__main__":
    main()
